# -*- coding: utf-8 -*-
"""Penguins_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kAkX4SO9v776gly6dKhRuYM9YvF6ph-Q

### Classification of Penguins
"""



#importing required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#Loading dataset
df = pd.read_csv("/content/drive/MyDrive/Streamlit_Apps/penguins_cleaned.csv")
df.head()

df.info()

##We can see that there is no missing values in datasets
df.isnull().sum()

df.describe()

df['species'].value_counts()

df['island'].value_counts()

"""### Data Visualization"""

import seaborn as sns
sns.set_style('whitegrid')
plt.figure(figsize = (10,8))
sns.boxplot(x = df['species'], y = df['bill_depth_mm'], data = df)
plt.show()

plt.figure(figsize = (10,8))
sns.scatterplot(x = 'bill_length_mm', y = 'bill_depth_mm',hue= 'species' , data = df)
plt.show()

islands = df['island'].value_counts().reset_index()
islands

plt.figure(figsize = (10, 8))
sns.barplot(x = 'island', y = 'index', data = islands)
plt.xlabel(" ")
plt.ylabel("Islands")
plt.show()

"""- From the above plot, we can see that Biscoe island consists of more penguins."""

new_df = df.loc[:, ['species', 'bill_length_mm', 'bill_depth_mm','sex', 'flipper_length_mm', 'body_mass_g']]
new_df['mean_bill_length'] = new_df.groupby(['species', 'sex'])['bill_length_mm'].transform('mean')

new_df.head()

new_df.drop('bill_length_mm', axis = 1, inplace = True)

new_df.head()

plt.figure(figsize = (10, 8))
sns.barplot(x = 'mean_bill_length', y = 'species', hue = 'sex', data = new_df)
plt.show()

"""- From the above plot we can conclude that Chinstrap species has the highest bill length."""

new_df['mean_bill_depth'] = new_df.groupby(['species', 'sex'])['bill_depth_mm'].transform('mean')

new_df.head()

new_df.drop('bill_depth_mm', axis =1, inplace = True)

plt.figure(figsize = (10, 8))
sns.barplot(x = 'species', y = 'mean_bill_depth', hue = 'sex', data = new_df)
plt.show()

"""- From the above plot we can see that penguin species Chinstrap(male & female) has highest bill depth."""

new_df.head()

new_df.drop('mean_bill_length', axis = 1, inplace = True)

new_df['mean_flipper_length'] = df.groupby(['species', 'sex'])['flipper_length_mm'].transform('mean')

new_df['mean_body'] = df.groupby(['species', 'sex'])['body_mass_g'].transform('mean')

new_df.head()

plt.figure(figsize = (10, 8))
sns.barplot(x = 'mean_flipper_length', y = 'species',hue = 'sex', data = new_df)
plt.show()

"""- From the above plot we can conclude that penguin species Gentoo(male & female) has the highest flipper length."""

plt.figure(figsize = (10, 8))
sns.barplot(x = 'mean_body', y = 'species',hue = 'sex', data = new_df)
plt.show()

"""- From the above plot we can conclude that the penguins species Gentoo (male & female) has highest body mass."""

#Feature Engineering
df.head()

df['species'].value_counts()

df['species'] = df['species'].replace({'Adelie': 0, 'Gentoo': 1, 'Chinstrap': 2})

df.head()

df = pd.get_dummies(df)

df.head()

df.shape

#Now split dataset into independent variable and dependent variable
X = df.drop('species', axis = 1)
y = df['species']

X.head()

y.head()

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

#Now splitting dataset into training and testing data
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 42)

print(x_train.shape, x_test.shape)

print(y_train.shape, y_test.shape)

#Scaling dataset
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

x_train[:5]

#Now create classification model
from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier()

#Train the model
clf.fit(x_train, y_train)

#Predict the model 
prediction = clf.predict(x_test)

prediction

#Let's see the performance of the model
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
accuracy_model = accuracy_score(y_test, prediction)
accuracy_model

cm = confusion_matrix(y_test, prediction)
cm

print(classification_report(y_test, prediction))

import pickle

pickle.dump(clf, open("penguins_clf_model.pkl", 'wb'))















